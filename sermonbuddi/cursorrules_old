# IMPORTANT Write the code as if the guy who ended up maintaining your code will be a violent psychopath who knows where you live.
# Cursor AI Rules - Complete Error Prevention System

## üö® CRITICAL: EXPO BUNDLING ERROR PREVENTION

### MANDATORY PRE-EDIT CHECKS
Before making ANY code changes that involve imports or file references:

1. **ALWAYS verify file structure first** using `list_dir` or `file_search` tools
2. **NEVER assume import paths exist** without checking
3. **ALWAYS use correct relative paths** based on actual file locations
4. **TEST import paths** against the real directory structure
5. **CHECK if target files have actual content** before referencing them

### IMPORT PATH RULES

#### ‚ùå FORBIDDEN ACTIONS:
- Adding imports without verifying the target file exists AND has content
- Using relative paths like `../components/ui/` without checking if that structure exists
- Creating imports to `IconComponents` or similar UI libraries without verification
- Copying import statements from other files without path verification
- Making changes to import statements without checking current working imports
- Creating duplicate variable declarations in any file
- Using deep relative paths like `../../../services/` instead of `@/services/`
- Creating empty files that break navigation routing
- Leaving files with only whitespace that cause "This screen doesn't exist" errors
- **IMPORTING NEXT.JS PACKAGES IN EXPO PROJECTS** (causes bundling failures)
- **Using @supabase/auth-helpers-nextjs in Expo** (use @supabase/supabase-js instead)
- **Creating API routes like app/api/chat/route.ts** (Next.js pattern, not supported in Expo)
- **Using next/server, next/navigation, or any next/* imports** (Next.js only)
- **Importing createClientComponentClient from auth-helpers-nextjs** (use createClient instead)

#### ‚úÖ REQUIRED ACTIONS:
1. **Before adding any import:**
   ```
   - Use list_dir to check if target directory exists
   - Use file_search to locate the actual component file
   - Use read_file to verify the file has actual content (not empty)
   - Verify the exact relative path from source to target
   ```

2. **For UI component imports specifically:**
   ```
   - Check if components/ui/ directory exists
   - Verify IconComponents.tsx or similar files exist AND have content
   - Use correct path: '@/components/ui/' or './components/ui/' based on project structure
   ```

3. **For existing file modifications:**
   ```
   - Read the current imports in the file first
   - Only modify imports that are already working
   - Never change working import paths without explicit user request
   ```

4. **For variable declarations:**
   ```
   - Always check for existing variable declarations before adding new ones
   - Never declare the same variable name twice in the same scope
   - Use unique variable names or proper scoping
   ```

5. **For service imports:**
   ```
   - ALWAYS use @/ prefix for service imports
   - Correct: import { Service } from '@/services/serviceName'
   - NEVER use: import { Service } from '../../../services/serviceName'
   ```

6. **For Supabase client creation in Expo:**
   ```
   // ‚úÖ CORRECT - Expo/React Native compatible
   import { createClient } from '@supabase/supabase-js';
   const supabase = createClient(
     process.env.EXPO_PUBLIC_SUPABASE_URL!,
     process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!
   );
   
   // ‚ùå FORBIDDEN - Next.js only, causes bundling errors in Expo
   import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
   const supabase = createClientComponentClient();
   ```

7. **For React Native/Expo route files:**
   ```
   - NEVER create empty .tsx files in app/(tabs)/ directory
   - ALWAYS provide complete component implementation
   - Every route file MUST have export default function ComponentName()
   - Verify files have actual content before considering them "created"
   ```

### FILE CORRUPTION PREVENTION

#### Duplicate Declaration Prevention:
```typescript
// ‚ùå BAD - Duplicate variable declarations
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

// Later in same file...
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!; // ERROR!

// ‚úÖ GOOD - Single declaration
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);
```

#### Variable Declaration Best Practices:
1. **Always search for existing declarations** before adding new ones
2. **Use const for immutable values**
3. **Use descriptive, unique variable names**
4. **Avoid global variable pollution**
5. **Never create duplicate const/let/var declarations in same scope**

### REACT INFINITE LOOP PREVENTION

#### üö® CRITICAL: PREVENT USEEFFECT INFINITE LOOPS

These patterns cause "Maximum update depth exceeded" errors:

##### ‚ùå FORBIDDEN Patterns:
```typescript
// BAD - searchParams changes on every render causing infinite loop
const searchParams = useLocalSearchParams();
useEffect(() => {
  // This runs infinitely
}, [searchParams]);

// BAD - Object/array dependencies that change every render
useEffect(() => {
  // This runs infinitely
}, [{ someObj }, [someArray]]);
```

##### ‚úÖ REQUIRED Patterns:
```typescript
// GOOD - Memoize specific values from searchParams
const projectId = useMemo(() => {
  return searchParams?.project_id as string;
}, [searchParams?.project_id]);

useEffect(() => {
  // Prevent multiple calls
  if (alreadyLoaded.current) return;
  alreadyLoaded.current = true;
  
  // Your logic here
  
  return () => {
    alreadyLoaded.current = false; // Reset on cleanup
  };
}, [projectId]);

// GOOD - Use refs for flags to prevent multiple calls
const processStarted = useRef(false);
```

#### Infinite Loop Prevention Rules:
1. **NEVER use raw searchParams or similar objects in useEffect dependencies**
2. **ALWAYS memoize specific values from objects that change frequently**
3. **USE useRef flags to prevent multiple function calls**
4. **ADD cleanup functions to reset flags when dependencies change**
5. **AVOID object literals or array literals in dependency arrays**

### SYNTAX ERROR PREVENTION

#### Critical Syntax Rules:
1. **NEVER leave incomplete code blocks**
2. **ALWAYS close all brackets, parentheses, and braces**
3. **NEVER create orphaned else statements**
4. **CHECK function/method call syntax**
5. **VERIFY all semicolons are placed correctly**
6. **ALWAYS add missing semicolons when required**
7. **NEVER leave malformed if-else structures**

#### Common Syntax Errors to Avoid:
```typescript
// ‚ùå BAD - Missing semicolon
[projectCreatedMessage.id]: projectData.widget!
                                                ^

// ‚úÖ GOOD - Proper semicolon
[projectCreatedMessage.id]: projectData.widget!;

// ‚ùå BAD - Orphaned else
if (condition) {
  // code
} 
// Missing else keyword here
{
  // This creates syntax error
}

// ‚úÖ GOOD - Complete structures
if (condition) {
  // code
} else {
  // alternative code
}

// ‚ùå BAD - Malformed else-if after return
return; // Skip adding regular response text
} else if (toolCall.name === 'create_project') {

// ‚úÖ GOOD - Proper structure
return; // Skip adding regular response text
}
} else if (toolCall.name === 'create_project') {
```

### NEXT.JS VS EXPO COMPATIBILITY

#### üö® CRITICAL: NEVER MIX NEXT.JS AND EXPO PATTERNS

This is an **Expo React Native** project, NOT a Next.js project. The following patterns will cause bundling failures:

##### ‚ùå FORBIDDEN Next.js Patterns:
```typescript
// Next.js Auth Helpers (causes bundling errors)
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';

// Next.js API Routes (not supported in Expo)
// app/api/chat/route.ts - DELETE THIS TYPE OF FILE

// Next.js Server Components
import { headers } from 'next/headers';
import { redirect } from 'next/navigation';

// Next.js Image Component
import Image from 'next/image';
```

##### ‚úÖ REQUIRED Expo Patterns:
```typescript
// Expo-compatible Supabase
import { createClient } from '@supabase/supabase-js';

// Expo Router
import { router } from 'expo-router';

// React Native Image
import { Image } from 'react-native';

// React Native Navigation
import { useNavigation } from '@react-navigation/native';
```

#### Metro Bundler Error Prevention:
1. **Always use standard @supabase/supabase-js for database access**
2. **Never create app/api/ directories or route.ts files**
3. **Use expo-router for navigation, not next/router**
4. **Check package.json - if it has 'expo' dependencies, NO Next.js imports**

### METRO BUNDLER COMPATIBILITY

#### File Extension Rules:
1. **Use .ts for TypeScript files without JSX**
2. **Use .tsx for TypeScript files with JSX**
3. **NEVER mix JSX in .ts files**
4. **Ensure all imports match actual file extensions**

#### Cache Prevention:
1. **After any import path changes, recommend cache clearing**
2. **Watch for Metro cache corruption signs**
3. **Suggest `npx expo start --clear` when bundling issues occur**

### IMPORT PATH MAPPING RULES

#### Preferred Import Patterns:
```typescript
// ‚úÖ GOOD - Use @ prefix for absolute imports
import { Component } from '@/components/Component';
import { Service } from '@/services/Service';
import { Types } from '@/src/types/types';
import { Utils } from '@/utils/utils';

// ‚ùå BAD - Deep relative paths
import { Component } from '../../../components/Component';
import { Service } from '../../../services/Service';
```

#### Service Layer Imports:
```typescript
// ‚úÖ GOOD - Check these paths exist first
import { KnowledgeBucketService } from '@/services/knowledgeBucketService';
import { CoherencyScoreService } from '@/services/coherencyScoreService';

// ‚ùå BAD - Don't assume relative paths work
import { KnowledgeBucketService } from '../../../services/knowledgeBucketService';
```

### EXPO ROUTE FILE REQUIREMENTS

#### React Native Route Files MUST:
1. **Have complete export default function**
2. **Import all necessary React Native components**
3. **Include proper JSX return statement**
4. **Have actual implementation, not empty content**
5. **Be properly formatted TypeScript/React code**

#### Example of CORRECT route file:
```typescript
import React from 'react';
import { View, Text } from 'react-native';

export default function MyScreen() {
  return (
    <View>
      <Text>Screen Content</Text>
    </View>
  );
}
```

#### ‚ùå FORBIDDEN - Empty route files:
```typescript
 
// This causes "This screen doesn't exist" error
```

### VALIDATION CHECKLIST

Before any file edit involving imports or route files:
- [ ] Target file/directory verified to exist
- [ ] Target file verified to have actual content (not empty)
- [ ] Import path tested against file structure  
- [ ] Relative path calculated correctly
- [ ] No assumptions made about UI component availability
- [ ] Existing working imports preserved
- [ ] Metro bundler compatibility considered
- [ ] No duplicate variable declarations
- [ ] Proper variable scoping maintained
- [ ] All syntax structures properly closed
- [ ] Function/method calls properly formatted
- [ ] All semicolons properly placed
- [ ] No orphaned else statements
- [ ] Route files have complete implementations

### IMPORT/EXPORT VERIFICATION RULES

#### Class Constructor Import Errors Prevention:
```typescript
// ‚ùå BAD - Don't assume class exists without verification
import { CoherencyScoreService } from '@/services/coherencyScoreService';
const service = new CoherencyScoreService(); // ERROR: Not a constructor

// ‚úÖ GOOD - Verify class exists first
import { FlowScoreCalculator } from '@/services/coherencyScoreService';
const calculator = new FlowScoreCalculator(); // VERIFIED: Class exists
```

#### Mandatory Import Verification Steps:
1. **Before importing any class:**
   ```
   - Use read_file to check what classes are actually exported
   - Verify the class is exported with 'export class ClassName'
   - Check constructor exists and is accessible
   - Never assume class names based on file names
   ```

2. **Service Import Pattern:**
   ```
   - Read the service file first to see actual exports
   - Use exact exported class names
   - Verify classes have constructors before instantiating
   - Check for default vs named exports
   ```

3. **React Native Component Import Rules:**
   ```
   - Always verify React Native components exist before importing
   - Check for correct export patterns (default vs named)
   - Verify component props and implementation
   ```

### METRO BUNDLER MANDATORY VERIFICATION PROTOCOL

#### BEFORE EVERY SINGLE CODE EDIT:
1. **ALWAYS read target file first** using `read_file` to check current content
2. **ALWAYS verify import paths exist** using `file_search` or `list_dir`
3. **ALWAYS check class exports** before importing with `read_file`
4. **ALWAYS verify route files have complete implementations**

#### CRITICAL IMPORT VERIFICATION RULES:

##### Class Constructor Import Prevention:
```typescript
// ‚ö†Ô∏è MANDATORY: Before importing ANY class, verify it exists:
// 1. Use read_file to check the service file
// 2. Verify exact exported class names
// 3. Check constructor exists and is accessible

// ‚ùå BAD - Don't assume class exists without verification
import { CoherencyScoreService } from '@/services/coherencyScoreService';
const service = new CoherencyScoreService(); // ERROR: Not a constructor

// ‚úÖ GOOD - Verify class exists first
// Step 1: Read services/coherencyScoreService.ts to see actual exports
// Step 2: Use exact exported class names
import { FlowScoreCalculator } from '@/services/coherencyScoreService';
const calculator = new FlowScoreCalculator(); // VERIFIED: Class exists
```

##### Service Import Pattern Verification:
```typescript
// MANDATORY STEPS before importing any service:
// 1. Use read_file to check what classes are actually exported
// 2. Verify the class is exported with 'export class ClassName'
// 3. Check constructor exists and is accessible
// 4. Never assume class names based on file names
```

##### Route File Content Verification:
```typescript
// ‚ùå FORBIDDEN - Empty route files
// File: app/(tabs)/demo.tsx
 
// This causes "This screen doesn't exist" error

// ‚úÖ REQUIRED - Complete route file implementation
import React from 'react';
import { View, Text } from 'react-native';

export default function DemoScreen() {
  return (
    <View>
      <Text>Screen Content</Text>
    </View>
  );
}
```

#### SPECIFIC ERROR PATTERN PREVENTION:

##### 1. Constructor Import Error:
**Error:** `TypeError: X.ClassName is not a constructor`
**Prevention:** 
- Read target file with `read_file` before importing
- Verify exact exported class names
- Check class has accessible constructor
- Never assume class names from filenames

##### 2. Route Content Error:
**Error:** `This screen doesn't exist. Go to home screen!`
**Prevention:**
- Always provide complete component implementation
- Include proper React imports and JSX return
- Verify file has actual content, not just whitespace

##### 3. Import Resolution Error:
**Error:** `Unable to resolve "path" from "file"`
**Prevention:**
- Use `file_search` to verify target file exists
- Check import path against actual directory structure
- Use absolute imports with @ prefix when available

### EMERGENCY PROTOCOL

If user reports bundling errors:
1. **Stop all modifications immediately**
2. **Use read_file** to check the problematic file
3. **Use list_dir** to verify directory structure
4. **Fix import paths** based on actual file locations
5. **Check for and eliminate duplicate declarations**
6. **Verify all syntax structures are complete**
7. **Ensure all route files have actual content**
8. **Fix missing semicolons and malformed structures**
9. **Verify all class imports have correct constructors**
10. **Check export/import patterns match exactly**
11. **Test with minimal changes** before adding complexity
12. **Recommend cache clearing: `rm -rf .expo && rm -rf node_modules/.cache && npx expo start --clear`**

### TYPESCRIPT SYNTAX ENFORCEMENT

#### Required TypeScript Practices:
1. **Proper interface/type definitions**
2. **Correct function signatures**
3. **Proper async/await usage**
4. **Correct export/import statements**
5. **No duplicate variable declarations**
6. **Proper semicolon usage**

#### React Native Specific Rules:
1. **Use React Native components correctly**
2. **Proper StyleSheet usage**
3. **Correct prop typing**
4. **Platform-specific imports when needed**
5. **Complete route file implementations**

### EXPO-SPECIFIC RULES

#### React Native/Expo Import Patterns:
- Use `@expo/vector-icons` for icons, not custom IconComponents unless verified to exist
- Check for existing icon implementations before creating new ones
- Prefer platform-specific imports that are known to work

#### Metro Bundler Considerations:
- Avoid deep relative paths (../../../) that may break during bundling
- Use absolute imports with @ prefix when available
- Check tsconfig.json or similar for path mappings
- Ensure all route files have complete implementations

### MIME TYPE ERROR PREVENTION

#### Server Response Issues:
1. **Watch for Metro returning `application/json` instead of `application/javascript`**
2. **Clear all caches when MIME type errors occur**
3. **Check for syntax errors that could corrupt bundling**
4. **Verify all import paths resolve correctly**
5. **Ensure no duplicate variable declarations causing syntax errors**

### CODE QUALITY ENFORCEMENT

#### Before Every Edit:
1. **Read existing code structure**
2. **Understand current import patterns**
3. **Preserve working configurations**
4. **Test changes incrementally**
5. **Never make assumptions about file locations**
6. **Always verify files have actual content**
7. **Check for duplicate variable declarations**
8. **Verify proper syntax structure completion**

### SPECIFIC ERROR PATTERNS TO AVOID

#### 1. Duplicate Variable Declaration Error:
```
ERROR SyntaxError: Identifier 'supabaseUrl' has already been declared. (7:6)
```
**Prevention:** Always check for existing variable names before declaring new ones

#### 2. Missing Semicolon Error:
```
ERROR SyntaxError: Missing semicolon. (724:48)
```
**Prevention:** Always add semicolons after object property assignments and statements

#### 3. Unexpected Token Error:
```
ERROR SyntaxError: Unexpected token (734:12)
} else if (toolCall.name === 'create_project') {
```
**Prevention:** Ensure proper code block structure and closing braces

#### 4. Route File Content Error:
```
This screen doesn't exist. Go to home screen!
```
**Prevention:** Always provide complete component implementation in route files

#### 5. Constructor Import Error:
```
TypeError: _coherencyScoreService.CoherencyScoreService is not a constructor
```
**Prevention:** 
- Always verify class exports before importing
- Use read_file to check actual exported class names
- Never assume class names from file names
- Verify classes have accessible constructors

## üéØ GOAL: ZERO BUNDLING ERRORS

Every import must be verified. Every path must be tested. Every variable must be unique. Every syntax structure must be complete. Every route file must have actual content. Never assume file structure. Always verify before modifying.

### ERROR RECOVERY COMMANDS

When errors occur, run in sequence:
```bash
# 1. Clear all caches
rm -rf .expo
rm -rf node_modules/.cache
rm -rf /tmp/metro-*

# 2. Clear watchman
watchman watch-del-all
watchman shutdown-server

# 3. Kill existing processes
pkill -f "expo start"

# 4. Restart with clean cache
npx expo start --clear --web
```